[x] BurstRAM write
[x] BurstRAM when done bursting check if new command and switch
    state to that instead of 'idle'
[ ] ICache: busy->idle state switch skipped if new command?
    if busy 0 can be predicted then a cycle can be saved by sending new command
    before entering 'idle' state
[ ] program device
[ ] RAMIO: make address 32 bit
[ ] move address of leds and uart to 0xffff:ffff etc
[ ] access value of btn1 and btn2
[ ] change uart_out, uart_in and leds to #define instead of statics
[ ] UartTx and UartRx make 'state' from bits instead of enumeration
[o] study 'task' and 'function'
[x]   task: as inlined include
[ ]   task: with arguments
[ ]   function with return value
[ ] access flash
    https://learn.lushaylabs.com/tang-nano-9k-reading-the-external-flash/
[ ] access PSRAM
[ ]     write burst
[ ]     read burst
[ ] read program from flash to PSRAM
[o] cache
[o]   instructions
[x]     block ram emulating PSRAM
[ ]     IP PSRAM
[ ]   data
[ ]     block ram emulating PSRAM
[ ]     IP PSRAM
[ ] ICache: when burst done check enable and implement start receive in
    that state instead of skipping a cycle
[x] ICache: how to consolidate the duplicate code in state IDLE and RECV
    using: task
[ ] study if 'enable' signal on modules where appropriate would reduce energy requirements
[ ]   RAM
[ ] 'reset' signal on modules
[ ] make 'reset' active low which seems to be the most common
[ ] qa/sim_3 does not have any assertions
[ ] new sim for UartTx only asserting the send
[ ] similar sample os but in C++23
[ ] switch to system verilog?
--------------------------------------------------------------------------
[x] study if a conditional statement is based on a parameter or localparam gets resolved at compile:
    from Gemini:
    "the if statement using a localparam as a condition  does get resolved at synthesis and can potentially omit or include the content of the if block based on the localparam value."
[x] study the impact of "integer" expression or replace with an "assign" wires from address
    from Gemini:
    "Usage: They are used for calculations and assignments within the logic blocks. They are not used to store data across clock cycles, which is a primary function of registers."
    "Overall, the current approach of using integers for these calculations is appropriate, and they will be treated as constants during synthesis."
    from Chat GPT 4o:
    "The integer variables in the provided Verilog code will be synthesized into registers rather than inferred as constants because they are used within an always block and need to retain their values across clock cycles."
[x] study byte enabled semi dual port block ram
    netlist file shows RAM.v gets inferred into byte enabled dual port ram
[x] generate os_start.S and #include depending on system configuration
[x] workflow for simulating and reading `vcd` files
